import java.util.* ;
import java.io.*; 
public class Solution {
	public static int countPartitions(int n, int d, int[] arr) {
		// Write your code here.
	return driver(n,d,arr);

	}
	public static int driver(int n,int d,int arr[]){
		int sum=0;
	for(int ele:arr)
		sum+=ele;
		
if((sum%2==1 && d%2==0) ||(sum%2==0 && d%2==1)) {
	 return 0;}
	int target = (sum+d)/2;
	if(d>=target)	return 0;
	int dp[][]=new int[n+1][target+1];
	for(int ele[]:dp)
		Arrays.fill(ele,-1);


	int res= solve(n-1,target,arr,dp);
	return res;
	}
	public static int solve(int n,int sum,int arr[],int dp[][]){
		//base cond
		if(sum==0 && n==-1){
			dp[n+1][sum]=1;
			return 1;
		}
		if(n<0){
			dp[n+1][sum]=0;
			return 0;
		}
		if(dp[n+1][sum]!=-1)
			return dp[n+1][sum];


		//choice 
		if(sum<arr[n]){
			dp[n+1][sum]=solve(n-1,sum,arr,dp);
		}
		else{
			dp[n+1][sum]=solve(n-1,sum,arr,dp)+solve(n-1,sum-arr[n],arr,dp);
		}
		return dp[n+1][sum];



	} 
}
